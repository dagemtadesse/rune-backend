// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              Int               @id @default(autoincrement())
  fullname        String
  handle          String            @unique
  createdAt       DateTime          @default(now())
  email           String            @unique
  avatar          String?
  mimeType        String?
  password        String
  role            Role              @default(USER)
  posts           Post[]
  comments        Comment[]
  channels        Channel[]
  postReactions   PostReaction[]
  commentReaction CommentReaction[]
}

model Channel {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  logo     String?
  mimeType String?
  address  String
  email    String  @unique
  verified Boolean @default(false)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  posts Post[]

  parentChannel   Channel? @relation("channelHeirarchy", fields: [parentChannelId], references: [id])
  parentChannelId Int?

  subChannels Channel[] @relation("channelHeirarchy")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  post   Post? @relation(fields: [postId], references: [id])
  postId Int?

  parentComment   Comment? @relation("commentHeirarchy", fields: [parentCommentId], references: [id])
  parentCommentId Int?

  subCommnets     Comment[]         @relation("commentHeirarchy")
  commentReaction CommentReaction[]
}

model Post {
  id       Int     @id @default(autoincrement())
  text     String
  mediaUrl String?
  mimeType String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  postReactions PostReaction[]
}

model PostReaction {
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  upvote   Boolean @default(false)
  downvote Boolean @default(false)

  @@unique([userId, postId])
}

model CommentReaction {
  comment      Comment @relation(fields: [commentId], references: [id])
  commentId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  upvote   Boolean @default(false)
  downvote Boolean @default(false)

  @@unique([userId, commentId])
}
